@page "/"
@using SpawnMetricsView.DataCollectorFiles
@using SpawnMetricsView.RawDataMetrics

<PageTitle>Spawn Metrics</PageTitle>

<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5em">
            <RadzenSidebarToggle Click="@(() => _isSidebarExpanded = !_isSidebarExpanded)"/>

            @if (_projectNames != null)
            {
                foreach (var projectName in _projectNames)
                {
                    <RadzenButton Icon="dashboard" IconPosition="IconPosition.Left" Text="@projectName.Trim('`')" Click="@(() => TryShowMetrics(projectName))"/>
                }
            }
            else
            {
                <RadzenLabel Text="No projects found"/>
            }
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@_isSidebarExpanded">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Fancy data" Icon="grade" Click="@(() => _isShowFancyData = true)"/>
            <RadzenPanelMenuItem Text="Raw data" Icon="code" Click="@(() => _isShowFancyData = false)"/>
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        @if (_isShowFancyData)
        {
            @if (_fancyData != null)
            {
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">

                    @foreach (var data in _fancyData)
                    {
                        <RadzenCard>
                            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                                <RadzenText TextStyle="TextStyle.H3" TextAlign="TextAlign.Center">@data.Key</RadzenText>

                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                                    <RadzenCard Style="width: 20em; height: 20em">
                                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
                                            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
                                                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
                                                    <RadzenText TextStyle="TextStyle.H4">@data.Value.currentValue</RadzenText>
                                                    <RadzenText>Current</RadzenText>
                                                </RadzenStack>

                                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
                                                        <RadzenText TextStyle="TextStyle.H5">@data.Value.averageValue.ToString("F2")</RadzenText>
                                                        <RadzenText>Average</RadzenText>
                                                    </RadzenStack>

                                                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
                                                        <RadzenText TextStyle="TextStyle.H5">@data.Value.medianValue.ToString("F2")</RadzenText>
                                                        <RadzenText>Median</RadzenText>
                                                    </RadzenStack>
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenStack>
                                    </RadzenCard>

                                    <RadzenCard Style="min-width: 1000px; width: 100em; height: 20em;">
                                        <RadzenChart ColorScheme="ColorScheme.Palette">
                                            <RadzenLineSeries Data="@data.Value.graphData" Title="@data.Key" CategoryProperty="Date" ValueProperty="Value">
                                                <RadzenMarkers MarkerType="MarkerType.None"/>
                                            </RadzenLineSeries>
                                            <RadzenCategoryAxis Padding="20" FormatString="{0:dd-MM-yyyy}"/>
                                            <RadzenValueAxis>
                                                <RadzenGridLines Visible="true"/>
                                            </RadzenValueAxis>
                                        </RadzenChart>
                                    </RadzenCard>
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenCard>
                    }
                </RadzenStack>
            }
            else
            {
                <RadzenLabel Text="No data found for the project"/>
            }
        }
        else
        {
            @if (_rawDataColumns != null && _rawDataColumns.Count > 0 && _rawDataRows != null && _rawDataRows.Count > 0)
            {
                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                Data="@_rawDataRows" TItem="Dictionary<string, object>" LogicalFilterOperator="LogicalFilterOperator.And">
                    <Columns>
                        <RadzenDataGridColumn TItem="Dictionary<string, object>" Property="@RawDataHelpers.GetColumnPropertyExpression(RawDataConstants.LogTimePropertyName, _rawDataColumns[RawDataConstants.LogTimePropertyName])" Type="@_rawDataColumns[RawDataConstants.LogTimePropertyName]" Filterable="true" Title="Commit time (UTC)" Frozen="false" Sortable="true" Width="5em" Resizable="false" Reorderable="false" TextAlign="TextAlign.Center">
                            <Template Context="metric">
                                @(((DateTime)metric[RawDataConstants.LogTimePropertyName]).ToString("dd-MM-yyyy HH:mm"))
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="Dictionary<string, object>" Property="@RawDataHelpers.GetColumnPropertyExpression(RawDataConstants.CommitGitHubUrlPropertyName, _rawDataColumns[RawDataConstants.CommitGitHubUrlPropertyName])" Type="@_rawDataColumns[RawDataConstants.CommitGitHubUrlPropertyName]" Filterable="true" Title="Commit" Frozen="false" Sortable="false" Width="5em" Resizable="false" Reorderable="false" TextAlign="TextAlign.Center">
                            <Template Context="metric">
                                <RadzenLink Text="@RawDataHelpers.GetCommitHashFromGitHubUrl(metric[RawDataConstants.CommitGitHubUrlPropertyName] as string)" Path="@(metric[RawDataConstants.CommitGitHubUrlPropertyName] as string)"/>
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="Dictionary<string, object>" Property="@RawDataHelpers.GetColumnPropertyExpression(RawDataConstants.CommitMessagePropertyName, _rawDataColumns[RawDataConstants.CommitMessagePropertyName])" Type="@_rawDataColumns[RawDataConstants.CommitMessagePropertyName]" Filterable="true" Title="Commit message" Frozen="false" Sortable="false" Width="30em" Resizable="true" Reorderable="false" TextAlign="TextAlign.Center">
                            <Template Context="metric">
                                @metric[RawDataConstants.CommitMessagePropertyName]
                            </Template>
                        </RadzenDataGridColumn>

                        @foreach (var column in _rawDataColumns.Skip(3))
                        {
                            <RadzenDataGridColumn TItem="Dictionary<string, object>" Property="@RawDataHelpers.GetColumnPropertyExpression(column.Key, column.Value)" Type="@column.Value" Filterable="true" Title="@column.Key" Frozen="false" Sortable="true" Width="5em" Resizable="false" Reorderable="false" TextAlign="TextAlign.Center">
                                <Template Context="metric">
                                    @metric[column.Key]
                                </Template>
                            </RadzenDataGridColumn>
                        }
                    </Columns>
                </RadzenDataGrid>
            }
            else
            {
                <RadzenLabel Text="No data found for the project"/>
            }
        }
    </RadzenBody>
</RadzenLayout>

@code {
    private readonly DataCollector _dataCollector = new();

    private List<string>? _projectNames;
    private bool _isSidebarExpanded;

    private bool _isShowFancyData = true;

    private readonly RawDataMetricsCalculator _rawDataCalculator = new();
    private Dictionary<string, Type>? _rawDataColumns;
    private List<Dictionary<string, object>>? _rawDataRows;

    private Dictionary<string, (object currentValue, float averageValue, float medianValue, List<ChartData> graphData)>? _fancyData;

    private class ChartData
    {
        public DateTime Date { get; set; }
        public float Value { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _projectNames = await _dataCollector.GetProjectNames();

        if (_projectNames != null && _projectNames.Count > 0)
        {
            await TryShowMetrics(_projectNames[0]);
        }
    }

    private async Task TryShowMetrics(string projectName)
    {
        var metrics = await _dataCollector.GetMetricDataRange(projectName);

        if (metrics != null)
        {
            if (_isShowFancyData)
            {
                var metricNameToMetricRecordsMap = metrics.GroupBy(m => m.Name).ToDictionary(g => g.Key, g => g.ToList());

                _fancyData = new Dictionary<string, (object, float, float, List<ChartData> graphData)>();

                foreach (var (metricName, metricRecords) in metricNameToMetricRecordsMap)
                {
                    var orderedByDescending = metricRecords.OrderByDescending(x => x.LogTimeUtc).ToList();

                    object currentValue = orderedByDescending.First().Value;

                    if (int.TryParse(orderedByDescending.First().Value, out var valueInt))
                    {
                        currentValue = valueInt;
                    }
                    else if (float.TryParse(orderedByDescending.First().Value, out var valueFloat))
                    {
                        currentValue = valueFloat;
                    }

                    var metricAverage = metricRecords.Average(x => float.Parse(x.Value));
                    var metricMedian = metricRecords.Select(x => float.Parse(x.Value)).Order().ElementAt(metricRecords.Count / 2);

                    var last3MonthsRecords = orderedByDescending.TakeWhile(x => x.LogTimeUtc >= DateTime.UtcNow - TimeSpan.FromDays(90)).ToList();

                    var orderedByAscending = last3MonthsRecords.OrderBy(x => x.LogTimeUtc).ToList();

                    var graphX = orderedByAscending.Select(x => x.LogTimeUtc).ToList();

                    var graphY = orderedByAscending.Select(x => float.Parse(x.Value)).ToList();

                    var chartData = new List<ChartData>();

                    for (var i = 0; i < graphX.Count; i++)
                    {
                        chartData.Add(new ChartData
                        {
                            Date = graphX[i],
                            Value = graphY[i]
                        });
                    }

                    _fancyData.Add(metricName, (currentValue, metricAverage, metricMedian, chartData));
                }
            }
            else
            {
                (_rawDataColumns, _rawDataRows) = _rawDataCalculator.RecalculateRawData(metrics);
            }
        }
    }

}