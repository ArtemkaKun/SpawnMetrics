@page "/"
@using SpawnMetricsView.DataCollectorFiles
@using MetricRecordModel
@using Humanizer

<PageTitle>Spawn Metrics</PageTitle>

<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5em">
            <RadzenSidebarToggle Click="@(() => _isSidebarExpanded = !_isSidebarExpanded)"/>

            @if (_projectNames != null)
            {
                foreach (var projectName in _projectNames)
                {
                    <RadzenButton Icon="dashboard" IconPosition="IconPosition.Left" Text="@projectName" Click="@(() => TryShowMetrics(projectName))"/>
                }
            }
            else
            {
                <RadzenLabel Text="No projects found"/>
            }
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@_isSidebarExpanded">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Fancy data" Icon="grade"/>
            <RadzenPanelMenuItem Text="Raw data" Icon="code"/>
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        @if (_rawCommitMetrics != null && _rawDataColumns != null)
        {
            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                            Data="@_rawCommitMetrics" TItem="CommitMetrics" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>
                    <RadzenDataGridColumn TItem="CommitMetrics" Property="@nameof(CommitMetrics.LogTimeUtc)" Filterable="true" Title="Commit time (UTC)" Frozen="false" Sortable="true" Width="5em" Resizable="false" Reorderable="false" FormatString="{0:dd-MM-yyyy HH:mm}" TextAlign="TextAlign.Center"/>

                    <RadzenDataGridColumn TItem="CommitMetrics" Property="@nameof(CommitMetrics.CommitGitHubUrl)" Filterable="true" Title="Commit" Frozen="false" Sortable="false" Width="5em" Resizable="false" Reorderable="false" TextAlign="TextAlign.Center">
                        <Template Context="metric">
                            <RadzenLink Text="@GetCommitHashFromGitHubUrl(metric.CommitGitHubUrl)" Path="@metric.CommitGitHubUrl"/>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="CommitMetrics" Property="@nameof(CommitMetrics.CommitMessage)" Filterable="true" Title="Commit message" Frozen="false" Sortable="false" Width="30em" Resizable="true" Reorderable="false" TextAlign="TextAlign.Center"/>

                    @foreach (var column in _rawDataColumns)
                    {
                        <RadzenDataGridColumn TItem="CommitMetrics" Property="@nameof(CommitMetrics.Metric)" Filterable="false" Title="@_metricPropertyNameToTitle[column.Key]" Frozen="false" Sortable="false" Width="5em" Resizable="false" Reorderable="false" TextAlign="TextAlign.Center">
                            <Template Context="metric">
                                @metric.Metric.FirstOrDefault(x => x.Name.Camelize() == column.Key).Value
                            </Template>
                        </RadzenDataGridColumn>
                    }
                </Columns>
            </RadzenDataGrid>
        }
        else
        {
            <RadzenLabel Text="No data found for the project"/>
        }

        @* <RadzenRow AlignItems="AlignItems.Start"> *@
        @*     <RadzenColumn Size="3" Style="min-width: 450px; max-width: 450px"> *@
        @*         <RadzenCard> *@
        @*             <RadzenStack Orientation="Orientation.Vertical"> *@
        @*                 <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center"> *@
        @*                     <RadzenText TextStyle="TextStyle.H1">10000</RadzenText> *@
        @*                     <RadzenText>Lines of code</RadzenText> *@
        @*                 </RadzenStack> *@
        @*                 <RadzenRow Style="border-top: solid 1px gray;"> *@
        @*                     <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Style="margin: 1em"> *@
        @*                         <RadzenText TextStyle="TextStyle.H3">10000</RadzenText> *@
        @*                         <RadzenText>Lines of code (AVG)</RadzenText> *@
        @*                     </RadzenStack> *@
        @*                     <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Style="margin: 1em"> *@
        @*                         <RadzenText TextStyle="TextStyle.H3">10000</RadzenText> *@
        @*                         <RadzenText>Lines of code (Median)</RadzenText> *@
        @*                     </RadzenStack> *@
        @*                 </RadzenRow> *@
        @*             </RadzenStack> *@
        @*         </RadzenCard> *@
        @*     </RadzenColumn> *@
        @*     <RadzenColumn> *@
        @*         <RadzenCard Style="min-width: 1000px; max-width: 1500px; min-height: 348px;"> *@
        @*             <RadzenChart ColorScheme="ColorScheme.Palette"> *@
        @*                 <RadzenLineSeries Data="@revenue2020" Title="Spawn compiler (LOC)" CategoryProperty="Date" ValueProperty="Revenue"> *@
        @*                     <RadzenMarkers MarkerType="MarkerType.Circle"/> *@
        @*                 </RadzenLineSeries> *@
        @*                 <RadzenCategoryAxis Padding="20"/> *@
        @*                 <RadzenValueAxis> *@
        @*                     <RadzenGridLines Visible="true"/> *@
        @*                     <RadzenAxisTitle Text="Lines of code"/> *@
        @*                 </RadzenValueAxis> *@
        @*             </RadzenChart> *@
        @*         </RadzenCard> *@
        @*     </RadzenColumn> *@
        @* </RadzenRow> *@
    </RadzenBody>
</RadzenLayout>

@code {
    private readonly DataCollector _dataCollector = new();

    private List<string>? _projectNames;
    private bool _isSidebarExpanded;
    private List<MetricRecord>? _metrics;
    private List<CommitMetrics>? _rawCommitMetrics;
    private Dictionary<string, Type>? _rawDataColumns;
    private readonly Dictionary<string, string> _metricPropertyNameToTitle = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _projectNames = await _dataCollector.GetProjectNames();
    }

    private async Task TryShowMetrics(string projectName)
    {
        if (_projectNames == null || _projectNames.Contains(projectName) == false)
        {
            return;
        }

        _metrics = await _dataCollector.GetMetricDataRange(projectName);

        if (_metrics != null)
        {
            var groupedMetrics = _metrics.GroupBy(x => x.LogTimeUtc).ToDictionary(x => x.Key, x => x.ToList());

            _rawCommitMetrics = new List<CommitMetrics>();

            foreach (var (logTimeUtc, metricRecords) in groupedMetrics)
            {
                var commitGitHubUrl = metricRecords.First().CommitGitHubUrl;
                var commitMessage = metricRecords.First().CommitMessage;

                var metrics = metricRecords.DistinctBy(x => x.Name).Select(x => new CommitMetric(x.Name, x.Value, x.Units)).ToList();

                var flat = new Dictionary<string, object>();

                foreach (var metric in metrics)
                {
                    if (int.TryParse(metric.Value, out var valueInt))
                    {
                        flat.Add($"{metric.Name}".Camelize(), valueInt);
                    }
                    else if (float.TryParse(metric.Value, out var valueFloat))
                    {
                        flat.Add($"{metric.Name}".Camelize(), valueFloat);
                    }
                    else
                    {
                        flat.Add($"{metric.Name}".Camelize(), metric.Value);
                    }

                    _metricPropertyNameToTitle.TryAdd($"{metric.Name}".Camelize(), $"{metric.Name} ({metric.Units})");
                }

                _rawCommitMetrics.Add(new CommitMetrics(logTimeUtc, commitGitHubUrl, commitMessage, metrics));
            }

            _rawDataColumns = new Dictionary<string, Type>();

            var metricsNames = _rawCommitMetrics.First().Metric;

            foreach (var metric in metricsNames)
            {
                _rawDataColumns.Add($"{metric.Name}".Camelize(), metric.Value.GetType());
            }
        }
    }

    private static string GetCommitHashFromGitHubUrl(string url)
    {
        var split = url.Split('/');
        return split.Last();
    }

}