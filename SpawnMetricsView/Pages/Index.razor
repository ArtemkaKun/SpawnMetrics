@page "/"
@using SpawnMetricsView.DataCollectorFiles
@using MetricRecordModel
@using SpawnMetricsView.RawDataMetrics

<PageTitle>Spawn Metrics</PageTitle>

<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5em">
            <RadzenSidebarToggle Click="@(() => _isSidebarExpanded = !_isSidebarExpanded)"/>

            @if (_projectNames != null)
            {
                foreach (var projectName in _projectNames)
                {
                    <RadzenButton Icon="dashboard" IconPosition="IconPosition.Left" Text="@projectName" Click="@(() => TryShowMetrics(projectName))"/>
                }
            }
            else
            {
                <RadzenLabel Text="No projects found"/>
            }
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@_isSidebarExpanded">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Fancy data" Icon="grade"/>
            <RadzenPanelMenuItem Text="Raw data" Icon="code"/>
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        @if (_rawDataColumns != null && _rawDataColumns.Count > 0 && _rawDataRows != null && _rawDataRows.Count > 0)
        {
            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                            Data="@_rawDataRows" TItem="Dictionary<string, object>" LogicalFilterOperator="LogicalFilterOperator.And">
                <Columns>
                    @foreach (var column in _rawDataColumns)
                    {
                        switch (column.Key)
                        {
                            case nameof(MetricRecord.LogTimeUtc):
                                <RadzenDataGridColumn TItem="Dictionary<string, object>" Property="@RawDataHelpers.GetColumnPropertyExpression(column.Key, column.Value)" Type="@column.Value" Filterable="true" Title="Commit time (UTC)" Frozen="false" Sortable="true" Width="5em" Resizable="false" Reorderable="false" TextAlign="TextAlign.Center">
                                    <Template Context="metric">
                                        @(((DateTime)metric[column.Key]).ToString("dd-MM-yyyy HH:mm"))
                                    </Template>
                                </RadzenDataGridColumn>

                                break;
                            case nameof(MetricRecord.CommitGitHubUrl):
                                <RadzenDataGridColumn TItem="Dictionary<string, object>" Property="@RawDataHelpers.GetColumnPropertyExpression(column.Key, column.Value)" Type="@column.Value" Filterable="true" Title="Commit" Frozen="false" Sortable="false" Width="5em" Resizable="false" Reorderable="false" TextAlign="TextAlign.Center">
                                    <Template Context="metric">
                                        <RadzenLink Text="@RawDataHelpers.GetCommitHashFromGitHubUrl(metric[column.Key] as string)" Path="@(metric[column.Key] as string)"/>
                                    </Template>
                                </RadzenDataGridColumn>

                                break;
                            case nameof(MetricRecord.CommitMessage):
                                <RadzenDataGridColumn TItem="Dictionary<string, object>" Property="@RawDataHelpers.GetColumnPropertyExpression(column.Key, column.Value)" Type="@column.Value" Filterable="true" Title="Commit message" Frozen="false" Sortable="false" Width="30em" Resizable="true" Reorderable="false" TextAlign="TextAlign.Center">
                                    <Template Context="metric">
                                        @metric[column.Key]
                                    </Template>
                                </RadzenDataGridColumn>

                                break;

                            default:
                                <RadzenDataGridColumn TItem="Dictionary<string, object>" Property="@RawDataHelpers.GetColumnPropertyExpression(column.Key, column.Value)" Type="@column.Value" Filterable="true" Title="@column.Key" Frozen="false" Sortable="true" Width="5em" Resizable="false" Reorderable="false" TextAlign="TextAlign.Center">
                                    <Template Context="metric">
                                        @metric[column.Key]
                                    </Template>
                                </RadzenDataGridColumn>

                                break;
                        }
                    }
                </Columns>
            </RadzenDataGrid>
        }
        else
        {
            <RadzenLabel Text="No data found for the project"/>
        }

        @* <RadzenRow AlignItems="AlignItems.Start"> *@
        @*     <RadzenColumn Size="3" Style="min-width: 450px; max-width: 450px"> *@
        @*         <RadzenCard> *@
        @*             <RadzenStack Orientation="Orientation.Vertical"> *@
        @*                 <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center"> *@
        @*                     <RadzenText TextStyle="TextStyle.H1">10000</RadzenText> *@
        @*                     <RadzenText>Lines of code</RadzenText> *@
        @*                 </RadzenStack> *@
        @*                 <RadzenRow Style="border-top: solid 1px gray;"> *@
        @*                     <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Style="margin: 1em"> *@
        @*                         <RadzenText TextStyle="TextStyle.H3">10000</RadzenText> *@
        @*                         <RadzenText>Lines of code (AVG)</RadzenText> *@
        @*                     </RadzenStack> *@
        @*                     <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Style="margin: 1em"> *@
        @*                         <RadzenText TextStyle="TextStyle.H3">10000</RadzenText> *@
        @*                         <RadzenText>Lines of code (Median)</RadzenText> *@
        @*                     </RadzenStack> *@
        @*                 </RadzenRow> *@
        @*             </RadzenStack> *@
        @*         </RadzenCard> *@
        @*     </RadzenColumn> *@
        @*     <RadzenColumn> *@
        @*         <RadzenCard Style="min-width: 1000px; max-width: 1500px; min-height: 348px;"> *@
        @*             <RadzenChart ColorScheme="ColorScheme.Palette"> *@
        @*                 <RadzenLineSeries Data="@revenue2020" Title="Spawn compiler (LOC)" CategoryProperty="Date" ValueProperty="Revenue"> *@
        @*                     <RadzenMarkers MarkerType="MarkerType.Circle"/> *@
        @*                 </RadzenLineSeries> *@
        @*                 <RadzenCategoryAxis Padding="20"/> *@
        @*                 <RadzenValueAxis> *@
        @*                     <RadzenGridLines Visible="true"/> *@
        @*                     <RadzenAxisTitle Text="Lines of code"/> *@
        @*                 </RadzenValueAxis> *@
        @*             </RadzenChart> *@
        @*         </RadzenCard> *@
        @*     </RadzenColumn> *@
        @* </RadzenRow> *@
    </RadzenBody>
</RadzenLayout>

@code {
    private readonly DataCollector _dataCollector = new();

    private List<string>? _projectNames;
    private bool _isSidebarExpanded;

    private readonly RawDataMetricsCalculator _rawDataCalculator = new();
    private Dictionary<string, Type>? _rawDataColumns;
    private List<Dictionary<string, object>>? _rawDataRows;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _projectNames = await _dataCollector.GetProjectNames();

        if (_projectNames != null && _projectNames.Count > 0)
        {
            await TryShowMetrics(_projectNames[0]);
        }
    }

    private async Task TryShowMetrics(string projectName)
    {
        var metrics = await _dataCollector.GetMetricDataRange(projectName);

        if (metrics != null)
        {
            (_rawDataColumns, _rawDataRows) = _rawDataCalculator.RecalculateRawData(metrics);
        }
    }

}